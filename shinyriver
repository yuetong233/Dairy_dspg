library(shiny)
library(tigris)
library(sf)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readxl)
library(lubridate)
library(scales)
library(DT)

# --- Load spatial data and prep ---

# Load counties and transform CRS
va_counties <- counties(state = "VA", cb = TRUE, class = "sf")
va_counties <- st_transform(va_counties, 4326)
va_counties$NAME <- toupper(va_counties$NAME)

# Define target counties uppercase
target_counties <- toupper(c("Shenandoah", "Warren", "Augusta", "Rockingham", 
                             "Page", "Frederick", "Clarke", "Rockbridge"))

# Filter to target counties
target_va_counties <- va_counties %>% filter(NAME %in% target_counties)
target_va_counties <- st_transform(target_va_counties, 4326)
primary_secondary_roads <- st_transform(primary_secondary_roads, 4326)
merged_suitability <- st_transform(merged_suitability, 4326)
merged <- st_transform(merged, 4326)


# Load roads shapefile
roads_path <- "C:/Users/irmo2303/Downloads/DSPG_foler/tl_2023_51_prisecroads-2/tl_2023_51_prisecroads.shp"
roads <- sf::st_read(roads_path, quiet = TRUE)

# Filter primary and secondary roads
primary_secondary_roads <- roads %>% filter(RTTYP %in% c("P", "S"))

# Spatial join roads with counties
roads_with_county <- st_join(primary_secondary_roads, target_va_counties["NAME"], left = FALSE)

# Calculate road segment lengths (meters)
roads_with_county$length_m <- as.numeric(st_length(roads_with_county))

# Summarize total road length per county (km)
accessibility_scores <- roads_with_county %>%
  group_by(NAME) %>%
  summarise(total_road_length_km = sum(length_m, na.rm = TRUE) / 1000)

# Rescale length to 0-100 accessibility score
accessibility_scores$score <- scales::rescale(accessibility_scores$total_road_length_km, to = c(0, 100))

# Drop geometry for join
accessibility_scores_df <- accessibility_scores %>% st_set_geometry(NULL)

# Merge scores with target counties for mapping
merged <- target_va_counties %>%
  left_join(accessibility_scores_df, by = "NAME")

# Load milk production data
milk_data <- read_excel("C:/Users/irmo2303/Downloads/DSPG_foler/milk_production.xlsx") %>%
  rename(`MILK (lbs)` = MILK)
milk_data$COUNTY <- toupper(milk_data$COUNTY)
milk_data$YEAR <- lubridate::year(milk_data$MONTH)
milk_data$MONTH <- lubridate::month(milk_data$MONTH, label = TRUE, abbr = FALSE)
milk_data$MONTH <- factor(milk_data$MONTH, levels = month.name, ordered = TRUE)

# Dummy suitability scores for dairy plant mapping (example)
index_data <- data.frame(
  NAME = target_counties,
  index = c(75, 60, 85, 90, 50, 65, 70, 80)
)

merged_suitability <- target_va_counties %>%
  left_join(index_data, by = "NAME")

domain_vals <- merged_suitability$index
if (all(is.na(domain_vals)) || length(domain_vals) == 0) {
  domain_vals <- c(0, 100)
}
pal_suit <- colorNumeric(palette = "YlOrRd", domain = domain_vals, na.color = "#f0f0f0")
pal_access <- colorNumeric(palette = "Blues", domain = merged$score, na.color = "#f0f0f0")

# --- UI ---
ui <- navbarPage("VA Data Dashboard",
                 tabPanel("Map View",
                          leafletOutput("map", height = "700px"),
                          absolutePanel(
                            top = 80, left = 20, width = 300, draggable = TRUE,
                            style = "background-color: rgba(255,255,255,0.9);
               padding: 10px; border-radius: 10px; box-shadow: 2px 2px 6px rgba(0,0,0,0.2);",
                            tags$div(
                              style = "display: flex; align-items: center;",
                              tags$h4("Top 5 Counties by Dairy Plant Suitability Score", style = "margin: 0;"),
                              actionLink("show_info", label = NULL, icon = icon("info-circle"), style = "color: #31708f; margin-left: 8px;")
                            ),
                            tableOutput("top5_table")
                          )
                 ),
                 tabPanel("Line Graph View",
                          sidebarLayout(
                            sidebarPanel(
                              h4("Select Counties: "),
                              uiOutput("county_selector"),
                              helpText("Shows milk production trends by county")
                            ),
                            mainPanel(
                              plotOutput("line_plot", height = "600px")
                            )
                          )
                 ),
                 tabPanel("Milk Production Table",
                          sidebarLayout(
                            sidebarPanel(
                              selectInput("milk_county", "County:", choices = sort(target_counties))
                            ),
                            mainPanel(
                              htmlOutput("milk_avg"),
                              DT::dataTableOutput("milk_table")
                            )
                          )
                 ),
                 tabPanel("Roads & Accessibility",
                          sidebarLayout(
                            sidebarPanel(
                              helpText("Primary & Secondary Roads and Accessibility Scores by County")
                            ),
                            mainPanel(
                              leafletOutput("roads_map", height = "500px"),
                              plotOutput("accessibility_bar", height = "300px")
                            )
                          )
                 )
)

# --- Server ---
server <- function(input, output, session) {
  
  # Dairy Plant Suitability Map
  output$map <- renderLeaflet({
    leaflet(merged_suitability) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addPolygons(
        fillColor = ~pal_suit(index),
        color = "blue",
        weight = 1,
        fillOpacity = 0.7,
        label = ~lapply(paste0(
          "<strong>", NAME, "</strong><br>",
          "Suitability Score: ", index
        ), htmltools::HTML),
        labelOptions = labelOptions(
          direction = "auto",
          style = list("font-weight" = "normal"),
          textsize = "14px"
        )
      ) %>%
      addLegend(pal = pal_suit, values = merged_suitability$index, title = "Dairy Plant Suitability Score")
  })
  
  output$top5_table <- renderTable({
    merged_suitability %>%
      st_drop_geometry() %>%
      arrange(desc(index)) %>%
      select(NAME, index) %>%
      slice_head(n = 5)
  })
  
  # Milk Production Line Graph
  output$county_selector <- renderUI({
    selectInput("selected_counties", "Counties:",
                choices = sort(unique(milk_data$COUNTY[milk_data$COUNTY %in% target_counties])),
                selected = head(sort(unique(milk_data$COUNTY[milk_data$COUNTY %in% target_counties])), 3),
                multiple = TRUE
    )
  })
  
  output$line_plot <- renderPlot({
    req(input$selected_counties)
    filtered_data <- milk_data %>%
      filter(COUNTY %in% input$selected_counties)
    
    filtered_data$MONTH <- factor(filtered_data$MONTH, levels = month.name, ordered = TRUE)
    
    ggplot(filtered_data, aes(x = MONTH, y = `MILK (lbs)`, color = COUNTY, group = COUNTY)) +
      geom_line(size = 1.2) +
      geom_point(size = 2) +
      scale_x_discrete(expand = c(0.01, 0)) +
      scale_y_continuous(labels = scales::comma) +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Raw Milk Production by County by Month (2024)", y = "Milk Output (lbs)", x = "Month") +
      theme(plot.title = element_text(size = 16, face = "bold"))
  })
  
  # Milk Production Table and Average
  output$milk_table <- DT::renderDataTable({
    req(input$milk_county)
    milk_data %>%
      filter(COUNTY == input$milk_county)
  })
  
  output$milk_avg <- renderUI({
    req(input$milk_county)
    avg_all_months <- milk_data %>%
      filter(COUNTY == input$milk_county) %>%
      group_by(YEAR) %>%
      summarise(`Average MILK (lbs)` = mean(`MILK (lbs)`, na.rm = TRUE), .groups = 'drop')
    
    avg_text <- paste(
      paste0("<b>", input$milk_county, "</b><br>",
             paste0("Year ", avg_all_months$YEAR, ": ", scales::comma(avg_all_months$`Average MILK (lbs)`), " lbs")
      ),
      collapse = "<br>"
    )
    
    HTML(paste0("<h3 style='margin-top:0;'>Average Monthly Milk Output by Year</h3>", avg_text))
  })
  
  # Roads & Accessibility Map
  output$roads_map <- renderLeaflet({
    leaflet(merged) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addPolygons(
        fillColor = ~pal_access(score),
        color = "black",
        weight = 1,
        fillOpacity = 0.7,
        label = ~lapply(paste0(
          "<strong>", NAME, "</strong><br>",
          "Accessibility Score: ", round(score, 1)
        ), htmltools::HTML),
        labelOptions = labelOptions(direction = "auto", style = list("font-weight" = "normal"), textsize = "14px")
      ) %>%
      addPolylines(data = primary_secondary_roads, color = "blue", weight = 2, opacity = 0.6) %>%
      addLegend(pal = pal_access, values = merged$score, title = "Accessibility Score")
  })
  
  # Accessibility Bar Chart
  output$accessibility_bar <- renderPlot({
    ggplot(accessibility_scores, aes(x = reorder(NAME, score), y = score, fill = score)) +
      geom_col() +
      coord_flip() +
      scale_fill_gradient(low = "lightblue", high = "blue") +
      labs(title = "Accessibility Scores by County", x = "County", y = "Score") +
      theme_minimal()
  })
  
  observeEvent(input$show_info, {
    showModal(modalDialog(
      title = "About the Score",
      "The score ranks counties based on milk production, labor availability, and transportation access, helping identify the best locations for a dairy plant.",
      easyClose = TRUE,
      footer = NULL
    ))
  })
}

# Run the app
shinyApp(ui, server)

